graph TD
    A[开始] --> B[调用 get_pid_by_name 查找目标进程 PID]
    B --> C{找到进程?}
    C -->|否| D[输出错误信息]
    D --> E[结束程序]
    C -->|是| F[调用 初始化内存模块]

    subgraph 初始化内存模块
    F --> F1[获取目标进程 task]
    F1 --> F2[分配缓存区域内存]
    F2 --> F3[创建工作线程池]
    F3 --> F4[初始化互斥锁和条件变量]
    F4 --> F5[设置目标进程内存保护]
    end

    F5 --> G{初始化成功?}
    G -->|否| H[输出错误信息]
    H --> E
    G -->|是| I[执行内存读写测试]

    subgraph 内存读写测试
    I --> I1[调用 读内存i32]
    I1 --> I2[调用 写内存i32]
    I2 --> I3[调用 读内存i64]
    I3 --> I4[调用 写内存i64]
    I4 --> I5[调用 读内存f32]
    I5 --> I6[调用 写内存f32]
    I6 --> I7[调用 读内存f64]
    I7 --> I8[调用 写内存f64]
    end

    I8 --> J[调用 关闭内存模块]

    subgraph 关闭内存模块
    J --> J1[停止工作线程]
    J1 --> J2[等待所有线程结束]
    J2 --> J3[释放缓存区域内存]
    J3 --> J4[释放目标进程 task]
    end

    J4 --> E

    subgraph 读写内存操作
    K[读/写内存请求] --> L[获取或创建内存页]
    L --> M{是否跨页操作?}
    M -->|是| N[分割为多次操作]
    N --> O[递归调用读/写函数]
    M -->|否| P[直接读写内存]
    O --> Q[更新缓存区域]
    P --> Q
    end

    subgraph 工作线程处理
    R[工作线程启动] --> S{检查是否有待处理请求}
    S -->|是| T[获取下一个内存请求]
    T --> U{是读还是写操作?}
    U -->|读| V[调用 读任意地址]
    U -->|写| W[调用 写任意地址]
    V --> X[返回结果]
    W --> X
    X --> S
    S -->|否| Y{是否停止线程?}
    Y -->|是| Z[结束线程]
    Y -->|否| S
